// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: The function receives a `name` parameter that matches with the name of `GPT_3_5_TURBO_0301` model in the `ModelEnum`. The function should return `ModelType.GPT_3_5_TURBO`.

2. Scenario: The function receives a `name` parameter that matches with the name of `GPT_4` or `GPT_4_32K` or `GPT_4_32K_0314` or `GPT_4_0314` model in the `ModelEnum`. The function should return `ModelType.GPT_4`.

3. Scenario: The function receives a `name` parameter that matches with the name of any other model in the `ModelEnum` not covered in the first two scenarios. The function should return the corresponding `ModelType` for that model.

4. Scenario: The function receives a `name` parameter that does not match with the name of any model in the `ModelEnum`. The function should return `null`.

5. Scenario: The function receives a `name` parameter that is `null`. The function should return `null`.

6. Scenario: The function receives a `name` parameter that is an empty string. The function should return `null`.

7. Scenario: The function receives a `name` parameter with leading or trailing white spaces that matches with the name of a model in the `ModelEnum` after trimming the white spaces. The function should return the corresponding `ModelType` for that model.

8. Scenario: The function receives a `name` parameter that matches with the name of a model in the `ModelEnum` but in different case (lowercase/uppercase). Test if the function is case-sensitive or not.

9. Scenario: The function is called concurrently from multiple threads with different `name` parameters. The function should return the correct `ModelType` for each thread.

10. Scenario: The function is called consecutively with the same `name` parameter. The function should return the same `ModelType` for each call.
*/

// ********RoostGPT********
package com.theokanning.openai.utils;

import com.knuddels.jtokkit.api.ModelType;
import org.junit.Test;
import static org.junit.Assert.*;

public class TikTokensUtil_getModelTypeByName_78299d9798_Test {

    @Test
    public void testGetModelTypeByName_GPT_3_5_TURBO_0301() {
        String name = "GPT_3_5_TURBO_0301";
        ModelType expected = ModelType.GPT_3_5_TURBO;
        ModelType actual = TikTokensUtil.getModelTypeByName(name);
        assertEquals(expected, actual);
    }

    @Test
    public void testGetModelTypeByName_GPT_4() {
        String name = "GPT_4";
        ModelType expected = ModelType.GPT_4;
        ModelType actual = TikTokensUtil.getModelTypeByName(name);
        assertEquals(expected, actual);
    }

    @Test
    public void testGetModelTypeByName_NotFound() {
        String name = "UNKNOWN";
        ModelType actual = TikTokensUtil.getModelTypeByName(name);
        assertNull(actual);
    }

    @Test
    public void testGetModelTypeByName_Null() {
        String name = null;
        ModelType actual = TikTokensUtil.getModelTypeByName(name);
        assertNull(actual);
    }

    @Test
    public void testGetModelTypeByName_Empty() {
        String name = "";
        ModelType actual = TikTokensUtil.getModelTypeByName(name);
        assertNull(actual);
    }

    @Test
    public void testGetModelTypeByName_Trimmed() {
        String name = " GPT_4 ";
        ModelType expected = ModelType.GPT_4;
        ModelType actual = TikTokensUtil.getModelTypeByName(name);
        assertEquals(expected, actual);
    }

    @Test
    public void testGetModelTypeByName_CaseSensitive() {
        String name = "gpt_4";
        ModelType actual = TikTokensUtil.getModelTypeByName(name);
        assertNull(actual);
    }

    // This test requires additional setup to run concurrently
    // @Test
    // public void testGetModelTypeByName_Concurrent() { ... }

    @Test
    public void testGetModelTypeByName_Consecutive() {
        String name = "GPT_4";
        ModelType expected = ModelType.GPT_4;
        ModelType actual1 = TikTokensUtil.getModelTypeByName(name);
        ModelType actual2 = TikTokensUtil.getModelTypeByName(name);
        assertEquals(expected, actual1);
        assertEquals(expected, actual2);
    }
}
