// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Valid Inputs
- Description: Test the OpenAiHttpException function with valid inputs.
- Steps: Pass valid OpenAiError, Exception, and status code as arguments.
- Expected Result: The function should execute without throwing any exceptions.

Test Scenario 2: Null OpenAiError
- Description: Test the OpenAiHttpException function with a null OpenAiError argument.
- Steps: Pass null as OpenAiError, a valid Exception, and a status code as arguments.
- Expected Result: The function should throw a NullPointerException.

Test Scenario 3: Null Exception
- Description: Test the OpenAiHttpException function with a null Exception argument.
- Steps: Pass a valid OpenAiError, null as Exception, and a status code as arguments.
- Expected Result: The function should execute without throwing any exceptions.

Test Scenario 4: Negative Status Code
- Description: Test the OpenAiHttpException function with a negative status code.
- Steps: Pass a valid OpenAiError, a valid Exception, and a negative number as status code.
- Expected Result: The function should execute without throwing any exceptions as negative status codes are valid in HTTP.

Test Scenario 5: OpenAiError with Null Fields
- Description: Test the OpenAiHttpException function with an OpenAiError object that has null fields.
- Steps: Pass an OpenAiError object with null fields, a valid Exception, and a status code as arguments.
- Expected Result: The function should execute without throwing any exceptions.

Test Scenario 6: Exception with Null Message
- Description: Test the OpenAiHttpException function with an Exception object that has a null message.
- Steps: Pass a valid OpenAiError, an Exception object with a null message, and a status code as arguments.
- Expected Result: The function should execute without throwing any exceptions.

Test Scenario 7: Zero Status Code
- Description: Test the OpenAiHttpException function with a status code of zero.
- Steps: Pass a valid OpenAiError, a valid Exception, and zero as the status code.
- Expected Result: The function should execute without throwing any exceptions as zero is a valid status code in HTTP.

Test Scenario 8: All Null Inputs
- Description: Test the OpenAiHttpException function with all null inputs.
- Steps: Pass null for all arguments.
- Expected Result: The function should throw a NullPointerException.
*/

// ********RoostGPT********
package com.theokanning.openai;

import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.BeforeEach;

public class OpenAiHttpException_OpenAiHttpException_c02d1c7ee9_Test {

    OpenAiError error;
    Exception parent;
    int statusCode;

    @BeforeEach
    public void setUp() {
        error = new OpenAiError();
        error.error = new OpenAiErrorDetails();
        error.error.message = "Error Message";
        error.error.code = "Error Code";
        error.error.param = "Error Param";
        error.error.type = "Error Type";
        parent = new Exception("Exception Message");
        statusCode = 200;
    }

    @Test
    public void testOpenAiHttpException_ValidInputs() {
        OpenAiHttpException exception = new OpenAiHttpException(error, parent, statusCode);
        Assertions.assertEquals("Error Message", exception.getMessage());
        Assertions.assertEquals("Error Code", exception.code);
        Assertions.assertEquals("Error Param", exception.param);
        Assertions.assertEquals("Error Type", exception.type);
        Assertions.assertEquals(200, exception.statusCode);
    }

    @Test
    public void testOpenAiHttpException_NullOpenAiError() {
        Assertions.assertThrows(NullPointerException.class, () -> {
            new OpenAiHttpException(null, parent, statusCode);
        });
    }

    @Test
    public void testOpenAiHttpException_NullException() {
        OpenAiHttpException exception = new OpenAiHttpException(error, null, statusCode);
        Assertions.assertNull(exception.getCause());
    }

    @Test
    public void testOpenAiHttpException_NegativeStatusCode() {
        OpenAiHttpException exception = new OpenAiHttpException(error, parent, -1);
        Assertions.assertEquals(-1, exception.statusCode);
    }

    @Test
    public void testOpenAiHttpException_OpenAiErrorWithNullFields() {
        error.error.message = null;
        error.error.code = null;
        error.error.param = null;
        error.error.type = null;
        OpenAiHttpException exception = new OpenAiHttpException(error, parent, statusCode);
        Assertions.assertNull(exception.getMessage());
        Assertions.assertNull(exception.code);
        Assertions.assertNull(exception.param);
        Assertions.assertNull(exception.type);
    }

    @Test
    public void testOpenAiHttpException_ExceptionWithNullMessage() {
        parent = new Exception(null);
        OpenAiHttpException exception = new OpenAiHttpException(error, parent, statusCode);
        Assertions.assertEquals("Error Message", exception.getMessage());
    }

    @Test
    public void testOpenAiHttpException_ZeroStatusCode() {
        OpenAiHttpException exception = new OpenAiHttpException(error, parent, 0);
        Assertions.assertEquals(0, exception.statusCode);
    }

    @Test
    public void testOpenAiHttpException_AllNullInputs() {
        Assertions.assertThrows(NullPointerException.class, () -> {
            new OpenAiHttpException(null, null, 0);
        });
    }

}
