// ********RoostGPT********
/*
Test generated by RoostGPT for test gradle-testing using AI Type Open AI and AI Model gpt-4

ROOST_METHOD_HASH=name_2c4b6e6b0b
ROOST_METHOD_SIG_HASH=name_d9b24fa545

================================VULNERABILITIES================================
Vulnerability: Insecure Direct Object References (IDOR) or CWE-639
Issue: The code seems to be a setter method for a 'name' field. If the 'name' field is sensitive or critical, allowing it to be set directly can lead to vulnerabilities if access controls are not properly implemented. An attacker might be able to manipulate this field to gain unauthorized access to data.
Solution: Ensure proper access controls are implemented. Validate and sanitize inputs. Do not expose sensitive fields directly.

Vulnerability: Cross-Site Scripting (XSS) or CWE-79
Issue: If the 'name' field is rendered in a user interface and is not properly sanitized, it can lead to Cross-Site Scripting (XSS) vulnerabilities. An attacker can inject malicious scripts through the 'name' field.
Solution: Always sanitize and escape outputs. Use libraries that automatically escape outputs. Do not trust user inputs.

================================================================================
"""
  Scenario 1: Testing with a valid name

  Details:  
    TestName: testNameWithValidInput
    Description: This test is meant to check if the method correctly assigns the input string to the name variable and returns the Builder object. 
  Execution:
    Arrange: Create a Builder object and a valid name string.
    Act: Invoke the name method with the valid name string.
    Assert: Check if the name variable of the Builder object is the same as the input string and if the returned object is the same as the initial Builder object.
  Validation: 
    The assertion verifies that the method correctly assigns the input string to the name variable and returns the Builder object. This is significant as it ensures the correct behavior of the Builder pattern.

  Scenario 2: Testing with null input

  Details:  
    TestName: testNameWithNullInput
    Description: This test checks if the method correctly handles a null input, which should not be allowed as the name is marked as NonNull.  
  Execution:
    Arrange: Create a Builder object.
    Act: Invoke the name method with null.
    Assert: Expect an exception to be thrown.
  Validation: 
    The assertion verifies that the method throws an exception when the input is null. This test is significant as it ensures the NonNull constraint of the name variable is enforced.

  Scenario 3: Testing with an empty string

  Details:  
    TestName: testNameWithEmptyString
    Description: This test checks if the method correctly handles an empty string input.  
  Execution:
    Arrange: Create a Builder object.
    Act: Invoke the name method with an empty string.
    Assert: Check if the name variable of the Builder object is the same as the input string and if the returned object is the same as the initial Builder object.
  Validation: 
    The assertion verifies that the method correctly assigns the input string to the name variable and returns the Builder object, even when the string is empty. This test is significant as it checks the method's behavior with edge case inputs.
"""
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ChatFunctionDynamicNameTest {
    private ChatFunctionDynamic.Builder builder;

    @BeforeEach
    public void setUp() {
        builder = new ChatFunctionDynamic.Builder();
    }

    @Test
    public void testNameWithValidInput() {
        String name = "validName";
        ChatFunctionDynamic.Builder result = builder.name(name);
        assertEquals(name, result.getName());
        assertSame(builder, result);
    }

    @Test
    public void testNameWithNullInput() {
        assertThrows(NullPointerException.class, () -> builder.name(null));
    }

    @Test
    public void testNameWithEmptyString() {
        String name = "";
        ChatFunctionDynamic.Builder result = builder.name(name);
        assertEquals(name, result.getName());
        assertSame(builder, result);
    }
}
