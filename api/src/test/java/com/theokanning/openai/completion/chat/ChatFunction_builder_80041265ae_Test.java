// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Builder object creation
   Test to check whether a new Builder object is created successfully when invoking the builder() method. 

2. Scenario: Builder object uniqueness
   Test to check whether each Builder object created is unique or not. This can be done by comparing two Builder objects created using the builder() method.

3. Scenario: Builder object property initialization
   Test to check whether all the properties of the Builder object are correctly initialized to their default values.

4. Scenario: Builder object property modification
   Test to check whether the properties of the Builder object can be modified correctly and the changes are reflected in the object.

5. Scenario: Builder object nullability
   Test to check whether the Builder object is non-null when created using the builder() method.

6. Scenario: Builder object type
   Test to check the type of the object returned by the builder() method. It should be of type Builder.

7. Scenario: Builder object method invocation
   Test to check whether all methods of the Builder object can be invoked without any exceptions.

8. Scenario: Builder object serialization and deserialization
   Test to check whether the Builder object can be correctly serialized and deserialized using Jackson annotations.

9. Scenario: Builder object equality
   Test to check whether two Builder objects with the same properties are considered equal.

10. Scenario: Builder object copying
    Test to check whether a new Builder object can be created by copying an existing Builder object.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ChatFunction_builder_80041265ae_Test {

    private Builder builder1;
    private Builder builder2;

    @Before
    public void setUp() {
        builder1 = Builder.builder();
        builder2 = Builder.builder();
    }

    @Test
    public void testBuilderObjectCreation() {
        assertNotNull(builder1);
    }

    @Test
    public void testBuilderObjectUniqueness() {
        assertNotEquals(builder1, builder2);
    }

    @Test
    public void testBuilderObjectPropertyInitialization() {
        assertNull(builder1.getName());
        assertNull(builder1.getDescription());
        assertNull(builder1.getParameters());
        assertNull(builder1.getExecutor());
    }

    @Test
    public void testBuilderObjectPropertyModification() {
        builder1.name("Test Name");
        builder1.description("Test Description");
        assertEquals("Test Name", builder1.getName());
        assertEquals("Test Description", builder1.getDescription());
    }

    @Test
    public void testBuilderObjectType() {
        assertTrue(builder1 instanceof Builder);
    }

    @Test
    public void testBuilderObjectMethodInvocation() {
        assertNotNull(builder1.name("Test Name"));
        assertNotNull(builder1.description("Test Description"));
        assertNotNull(builder1.executor(Object.class, obj -> obj));
    }

    // TODO: Add a test for serialization and deserialization if Jackson is used in the project

    @Test
    public void testBuilderObjectEquality() {
        builder1.name("Test Name");
        builder1.description("Test Description");
        builder2.name("Test Name");
        builder2.description("Test Description");
        assertEquals(builder1, builder2);
    }

    @Test
    public void testBuilderObjectCopying() {
        builder1.name("Test Name");
        builder1.description("Test Description");
        Builder builder3 = builder1;
        assertEquals(builder1, builder3);
    }
}
