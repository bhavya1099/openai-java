// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Null Parameter Test
   - Description: Pass null as the argument to the parameters function and check if it throws a NullPointerException. This is to validate that the function does not accept null values as per the @NonNull annotation.

2. Scenario: Valid Parameter Test
   - Description: Pass a valid ChatFunctionParameters object to the parameters function and check if it sets the 'parameters' field correctly. This is to validate that the function correctly assigns the 'parameters' field.

3. Scenario: Return Type Test
   - Description: Check if the function returns an instance of the Builder class. This is to validate that the function correctly follows the builder pattern.

4. Scenario: Multiple Calls Test
   - Description: Call the parameters function multiple times with different ChatFunctionParameters objects and check if it correctly sets the 'parameters' field each time. This is to validate that the function can correctly handle multiple calls.

5. Scenario: Empty Parameter Test
   - Description: Pass an empty ChatFunctionParameters object to the parameters function and check if it sets the 'parameters' field correctly. This is to validate that the function can handle empty objects.

6. Scenario: Large Parameter Test
   - Description: Pass a large ChatFunctionParameters object to the parameters function and check if it sets the 'parameters' field correctly and in a timely manner. This is to validate that the function can handle large objects and that it performs well under load.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import lombok.Data;
import lombok.NonNull;
import org.junit.Test;
import org.junit.Assert;

public class ChatFunctionDynamic_parameters_4c32ccaa91_Test {

    @Test(expected = NullPointerException.class)
    public void testNullParameter() {
        Builder builder = new Builder();
        builder.parameters(null);
    }

    @Test
    public void testValidParameter() {
        Builder builder = new Builder();
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        builder.parameters(parameters);
        Assert.assertEquals(parameters, builder.parameters);
    }

    @Test
    public void testReturnType() {
        Builder builder = new Builder();
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        Assert.assertTrue(builder.parameters(parameters) instanceof Builder);
    }

    @Test
    public void testMultipleCalls() {
        Builder builder = new Builder();
        ChatFunctionParameters parameters1 = new ChatFunctionParameters();
        ChatFunctionParameters parameters2 = new ChatFunctionParameters();
        builder.parameters(parameters1);
        Assert.assertEquals(parameters1, builder.parameters);
        builder.parameters(parameters2);
        Assert.assertEquals(parameters2, builder.parameters);
    }

    @Test
    public void testEmptyParameter() {
        Builder builder = new Builder();
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        builder.parameters(parameters);
        Assert.assertEquals(parameters, builder.parameters);
    }

    @Test
    public void testLargeParameter() {
        Builder builder = new Builder();
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        for (int i = 0; i < 1000; i++) {
            parameters.addProperty(new ChatFunctionProperty());
        }
        builder.parameters(parameters);
        Assert.assertEquals(parameters, builder.parameters);
    }

}
