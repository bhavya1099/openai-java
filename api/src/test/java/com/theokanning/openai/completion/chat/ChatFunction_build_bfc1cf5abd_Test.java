// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Test if the build function correctly assigns the "name" attribute to the ChatFunction object.
   Given a valid "name", when we call the build function, then the returned ChatFunction object should have the same "name".

2. Scenario: Test if the build function correctly assigns the "description" attribute to the ChatFunction object.
   Given a valid "description", when we call the build function, then the returned ChatFunction object should have the same "description".

3. Scenario: Test if the build function correctly assigns the "parametersClass" attribute to the ChatFunction object.
   Given a valid "parametersClass", when we call the build function, then the returned ChatFunction object should have the same "parametersClass".

4. Scenario: Test if the build function correctly assigns the "executor" attribute to the ChatFunction object.
   Given a valid "executor", when we call the build function, then the returned ChatFunction object should have the same "executor".

5. Scenario: Test if the build function returns a new instance of ChatFunction object every time it's called.
   When we call the build function multiple times, then it should return a new instance of ChatFunction object every time.

6. Scenario: Test if the build function handles null input for "name" attribute.
   Given a null "name", when we call the build function, then it should handle the null input gracefully.

7. Scenario: Test if the build function handles null input for "description" attribute.
   Given a null "description", when we call the build function, then it should handle the null input gracefully.

8. Scenario: Test if the build function handles null input for "parametersClass" attribute.
   Given a null "parametersClass", when we call the build function, then it should handle the null input gracefully.

9. Scenario: Test if the build function handles null input for "executor" attribute.
   Given a null "executor", when we call the build function, then it should handle the null input gracefully.

10. Scenario: Test if the build function can handle empty strings as input for "name" and "description" attributes.
    Given empty strings for "name" and "description", when we call the build function, then it should handle the empty strings gracefully.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Test;
import org.junit.Assert;
import java.util.function.Function;

public class ChatFunction_build_bfc1cf5abd_Test {

    @Test
    public void testNameAssignment() {
        Builder builder = new Builder();
        builder.name("testName");
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals("testName", chatFunction.getName());
    }

    @Test
    public void testDescriptionAssignment() {
        Builder builder = new Builder();
        builder.description("testDescription");
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals("testDescription", chatFunction.getDescription());
    }

    @Test
    public void testParametersClassAssignment() {
        Builder builder = new Builder();
        builder.executor(String.class, (Function<String, Object>) s -> s);
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals(String.class, chatFunction.getParametersClass());
    }

    @Test
    public void testExecutorAssignment() {
        Function<String, Object> function = s -> s;
        Builder builder = new Builder();
        builder.executor(String.class, function);
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals(function, chatFunction.getExecutor());
    }

    @Test
    public void testMultipleInstanceCreation() {
        Builder builder = new Builder();
        ChatFunction chatFunction1 = builder.name("name1").build();
        ChatFunction chatFunction2 = builder.name("name2").build();
        Assert.assertNotEquals(chatFunction1, chatFunction2);
    }

    @Test(expected = NullPointerException.class)
    public void testNameNullInputHandling() {
        Builder builder = new Builder();
        builder.name(null);
    }

    @Test(expected = NullPointerException.class)
    public void testDescriptionNullInputHandling() {
        Builder builder = new Builder();
        builder.description(null);
    }

    @Test(expected = NullPointerException.class)
    public void testParametersClassNullInputHandling() {
        Builder builder = new Builder();
        builder.executor(null, (Function<String, Object>) s -> s);
    }

    @Test(expected = NullPointerException.class)
    public void testExecutorNullInputHandling() {
        Builder builder = new Builder();
        builder.executor(String.class, null);
    }

    @Test
    public void testEmptyStringHandling() {
        Builder builder = new Builder();
        builder.name("").description("");
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals("", chatFunction.getName());
        Assert.assertEquals("", chatFunction.getDescription());
    }
}
