// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. **Scenario: Null Argument**
   - Test if the function throws an exception when a null argument is passed to the description method. Since the method uses @NonNull annotation, it should throw a NullPointerException when null is passed.

2. **Scenario: Empty String Argument**
   - Test if the function accepts an empty string as an argument. Even though the method uses @NonNull annotation, it should allow empty strings as they are not null.

3. **Scenario: Valid String Argument**
   - Test if the function properly sets the description when a valid non-empty string is passed. After the method call, the description field of the object should be equal to the passed string.

4. **Scenario: Return Type**
   - Test if the function returns the correct object type. The method should return an instance of Builder.

5. **Scenario: Chainability**
   - Test if the function is chainable. Since it returns a Builder object, it should be possible to chain this method with others in the Builder class.

6. **Scenario: Special Characters**
   - Test if the function properly sets the description when a string with special characters is passed. The description field of the object should be equal to the passed string.

7. **Scenario: Long String Argument**
   - Test if the function properly handles a very long string. It should be able to accept and set the description even if the string is unusually long.

8. **Scenario: Unicode Characters**
   - Test if the function properly handles a string with Unicode characters. The description field of the object should be equal to the passed string.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ChatFunctionDynamic_description_192aef2aea_Test {

    private Builder builder;

    @Before
    public void setUp() {
        builder = new Builder();
    }

    @Test(expected = NullPointerException.class)
    public void testDescription_NullArgument() {
        builder.description(null);
    }

    @Test
    public void testDescription_EmptyStringArgument() {
        builder.description("");
        assertEquals("", builder.getDescription());
    }

    @Test
    public void testDescription_ValidStringArgument() {
        builder.description("Test");
        assertEquals("Test", builder.getDescription());
    }

    @Test
    public void testDescription_ReturnType() {
        assertTrue(builder.description("Test") instanceof Builder);
    }

    @Test
    public void testDescription_Chainability() {
        builder.description("Test").name("Name");
        assertEquals("Test", builder.getDescription());
        assertEquals("Name", builder.getName());
    }

    @Test
    public void testDescription_SpecialCharacters() {
        builder.description("@#$%^&*()");
        assertEquals("@#$%^&*()", builder.getDescription());
    }

    @Test
    public void testDescription_LongStringArgument() {
        StringBuilder sb = new StringBuilder();
        for (int i = 0; i < 10000; i++) {
            sb.append("a");
        }
        builder.description(sb.toString());
        assertEquals(sb.toString(), builder.getDescription());
    }

    @Test
    public void testDescription_UnicodeCharacters() {
        builder.description("テスト");
        assertEquals("テスト", builder.getDescription());
    }
}
