// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. **Scenario: Null Argument**
   - Test if the function throws an exception when a null argument is passed to the description method. As per the "@NonNull" annotation, the function should not accept null values.

2. **Scenario: Empty String Argument**
   - Test if the function correctly sets the description to an empty string when an empty string is passed as an argument. 

3. **Scenario: Non-Empty String Argument**
   - Test if the function correctly sets the description field when a non-empty string is passed as an argument.

4. **Scenario: String with Special Characters**
   - Test if the function correctly sets the description field when a string with special characters is passed as an argument.

5. **Scenario: String with Leading or Trailing Spaces**
   - Test if the function correctly sets the description field when a string with leading or trailing spaces is passed as an argument. 

6. **Scenario: Long String Argument**
   - Test if the function correctly handles a very long string argument. This is to ensure that there are no buffer overflow issues or memory allocation problems.

7. **Scenario: Builder Return**
   - Test if the function returns the correct Builder object after setting the description field. This is to ensure that the function supports method chaining as per the Builder pattern.

8. **Scenario: Multiple Invocations**
   - Test if the function correctly sets the description field when it is invoked multiple times with different arguments. The function should always use the value from the latest invocation. 

9. **Scenario: Unicode Characters**
   - Test if the function correctly handles strings with Unicode characters. This is to ensure that the function supports internationalization.

10. **Scenario: Immutable Description Field**
    - Test if the description field remains immutable once set. This is to ensure the integrity of the data.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotNull;
import static org.junit.Assert.assertTrue;

public class ChatFunctionDynamic_description_192aef2aea_Test {
    private Builder builder;

    @Before
    public void setUp() {
        builder = new Builder();
    }

    @Test(expected = NullPointerException.class)
    public void testDescription_NullArgument() {
        builder.description(null);
    }

    @Test
    public void testDescription_EmptyStringArgument() {
        Builder result = builder.description("");
        assertEquals("", result.getDescription());
    }

    @Test
    public void testDescription_NonEmptyStringArgument() {
        Builder result = builder.description("Test");
        assertEquals("Test", result.getDescription());
    }

    @Test
    public void testDescription_SpecialCharacters() {
        Builder result = builder.description("!@#$%^&*()");
        assertEquals("!@#$%^&*()", result.getDescription());
    }

    @Test
    public void testDescription_LeadingTrailingSpaces() {
        Builder result = builder.description(" Test ");
        assertEquals(" Test ", result.getDescription());
    }

    @Test
    public void testDescription_LongStringArgument() {
        StringBuilder sb = new StringBuilder(10000);
        for (int i = 0; i < 10000; i++) {
            sb.append('a');
        }
        Builder result = builder.description(sb.toString());
        assertEquals(sb.toString(), result.getDescription());
    }

    @Test
    public void testDescription_BuilderReturn() {
        Builder result = builder.description("Test");
        assertNotNull(result);
        assertTrue(result instanceof Builder);
    }

    @Test
    public void testDescription_MultipleInvocations() {
        Builder result = builder.description("Test1").description("Test2");
        assertEquals("Test2", result.getDescription());
    }

    @Test
    public void testDescription_UnicodeCharacters() {
        Builder result = builder.description("テスト");
        assertEquals("テスト", result.getDescription());
    }

    @Test
    public void testDescription_ImmutableDescriptionField() {
        builder.description("Test");
        String description = builder.getDescription();
        description = "Changed";
        assertEquals("Test", builder.getDescription());
    }
}
