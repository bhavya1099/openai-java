// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Validate that a property can be added to the properties HashMap.
   Test Steps: 
   - Create a new `ChatFunctionProperty` object with a unique `name` and any value for `required`.
   - Call the `addProperty` method with this new property.
   - Verify that the property has been added to the properties map using the `getName` method.

2. Test Scenario: Validate that a property with `required` set to `true` is added to the `required` list.
   Test Steps:
   - Create a new `ChatFunctionProperty` object with `required` set to `true`.
   - Call the `addProperty` method with this new property.
   - Verify that the property's name has been added to the `required` list.

3. Test Scenario: Validate that a property with `required` set to `false` is not added to the `required` list.
   Test Steps:
   - Create a new `ChatFunctionProperty` object with `required` set to `false`.
   - Call the `addProperty` method with this new property.
   - Verify that the property's name has not been added to the `required` list.

4. Test Scenario: Validate that the `required` list is initialized if it's `null` when a property with `required` set to `true` is added.
   Test Steps:
   - Ensure the `required` list is `null`.
   - Create a new `ChatFunctionProperty` object with `required` set to `true`.
   - Call the `addProperty` method with this new property.
   - Verify that the `required` list is no longer `null` and contains the property's name.

5. Test Scenario: Validate that adding a property with a name that already exists in the properties map updates the existing entry.
   Test Steps:
   - Create a new `ChatFunctionProperty` object with a specific name and `required` set to `false`.
   - Call the `addProperty` method with this new property.
   - Create another `ChatFunctionProperty` object with the same name but `required` set to `true`.
   - Call the `addProperty` method with this new property.
   - Verify that the property in the properties map has `required` set to `true` and its name is in the `required` list.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ChatFunctionParameters_addProperty_d577ed238f_Test {
    private ChatFunctionParameters chatFunctionParameters;

    @Before
    public void setUp() {
        chatFunctionParameters = new ChatFunctionParameters();
    }

    @Test
    public void testAddProperty() {
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        property.setRequired(false);
        chatFunctionParameters.addProperty(property);
        assertEquals(property, chatFunctionParameters.getProperties().get("test"));
    }

    @Test
    public void testAddPropertyRequiredTrue() {
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        property.setRequired(true);
        chatFunctionParameters.addProperty(property);
        assertTrue(chatFunctionParameters.getRequired().contains("test"));
    }

    @Test
    public void testAddPropertyRequiredFalse() {
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        property.setRequired(false);
        chatFunctionParameters.addProperty(property);
        assertFalse(chatFunctionParameters.getRequired().contains("test"));
    }

    @Test
    public void testAddPropertyRequiredListNotNull() {
        assertNull(chatFunctionParameters.getRequired());
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        property.setRequired(true);
        chatFunctionParameters.addProperty(property);
        assertNotNull(chatFunctionParameters.getRequired());
    }

    @Test
    public void testAddPropertyExistingName() {
        ChatFunctionProperty property1 = new ChatFunctionProperty();
        property1.setName("test");
        property1.setRequired(false);
        chatFunctionParameters.addProperty(property1);
        ChatFunctionProperty property2 = new ChatFunctionProperty();
        property2.setName("test");
        property2.setRequired(true);
        chatFunctionParameters.addProperty(property2);
        assertTrue(chatFunctionParameters.getProperties().get("test").getRequired());
        assertTrue(chatFunctionParameters.getRequired().contains("test"));
    }
}
