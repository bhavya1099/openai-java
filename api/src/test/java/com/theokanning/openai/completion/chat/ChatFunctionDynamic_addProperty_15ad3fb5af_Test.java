// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Add a valid property to the parameters.
   Description: In this scenario, we will add a valid ChatFunctionProperty to the parameters and ensure that the function behaves as expected.

2. Scenario: Add a null property to the parameters.
   Description: In this scenario, we will try to add a null ChatFunctionProperty to the parameters and ensure that the function throws an exception as expected.

3. Scenario: Add a property when the parameters object is null.
   Description: In this scenario, we will try to add a ChatFunctionProperty when the parameters object is null and ensure that the function throws an exception as expected.

4. Scenario: Add multiple properties to the parameters.
   Description: In this scenario, we will add multiple distinct ChatFunctionProperty to the parameters and ensure that the function behaves as expected.

5. Scenario: Add the same property multiple times to the parameters.
   Description: In this scenario, we will add the same ChatFunctionProperty multiple times to the parameters and ensure that the function behaves as expected. 

6. Scenario: Add a property when the parameters object is already full.
   Description: In this scenario, we will try to add a ChatFunctionProperty when the parameters object is already full and ensure that the function throws an exception as expected.

7. Scenario: Add a property to the parameters and ensure it can be retrieved correctly.
   Description: In this scenario, we will add a ChatFunctionProperty to the parameters and then retrieve it to ensure it has been stored correctly.

8. Scenario: Add a property to the parameters and ensure it does not overwrite existing properties.
   Description: In this scenario, we will add a ChatFunctionProperty to the parameters and ensure it does not overwrite any other existing properties.

9. Scenario: Add a property after removing a property.
   Description: In this scenario, we will add a ChatFunctionProperty, remove it, and then add another to check the function's behavior in such a case.

10. Scenario: Add a property to the parameters and ensure the Builder object is returned.
    Description: In this scenario, we will add a ChatFunctionProperty to the parameters and ensure that the function returns the Builder object as expected.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ChatFunctionDynamic_addProperty_15ad3fb5af_Test {

    private Builder builderUnderTest;

    @Before
    public void setUp() {
        builderUnderTest = new Builder();
    }

    @Test
    public void testAddProperty_ValidProperty_Success() {
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        Builder result = builderUnderTest.addProperty(property);
        assertEquals(builderUnderTest, result);
    }

    @Test(expected = NullPointerException.class)
    public void testAddProperty_NullProperty_ThrowsException() {
        builderUnderTest.addProperty(null);
    }

    @Test(expected = NullPointerException.class)
    public void testAddProperty_NullParameters_ThrowsException() {
        builderUnderTest.parameters = null;
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        builderUnderTest.addProperty(property);
    }

    @Test
    public void testAddProperty_MultipleProperties_Success() {
        ChatFunctionProperty property1 = new ChatFunctionProperty();
        property1.setName("test1");
        ChatFunctionProperty property2 = new ChatFunctionProperty();
        property2.setName("test2");
        builderUnderTest.addProperty(property1);
        builderUnderTest.addProperty(property2);
        assertEquals(2, builderUnderTest.parameters.getProperties().size());
    }

    @Test
    public void testAddProperty_SamePropertyMultipleTimes_Success() {
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        builderUnderTest.addProperty(property);
        builderUnderTest.addProperty(property);
        assertEquals(1, builderUnderTest.parameters.getProperties().size());
    }

    @Test(expected = OutOfMemoryError.class)
    public void testAddProperty_ParametersFull_ThrowsException() {
        for (int i = 0; i < Integer.MAX_VALUE; i++) {
            ChatFunctionProperty property = new ChatFunctionProperty();
            property.setName("test" + i);
            builderUnderTest.addProperty(property);
        }
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        builderUnderTest.addProperty(property);
    }

    @Test
    public void testAddProperty_RetrieveProperty_Success() {
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        builderUnderTest.addProperty(property);
        assertEquals(property, builderUnderTest.parameters.getProperties().get("test"));
    }

    @Test
    public void testAddProperty_DoesNotOverwriteExistingProperties_Success() {
        ChatFunctionProperty property1 = new ChatFunctionProperty();
        property1.setName("test1");
        ChatFunctionProperty property2 = new ChatFunctionProperty();
        property2.setName("test2");
        builderUnderTest.addProperty(property1);
        builderUnderTest.addProperty(property2);
        assertEquals(property1, builderUnderTest.parameters.getProperties().get("test1"));
        assertEquals(property2, builderUnderTest.parameters.getProperties().get("test2"));
    }

    @Test
    public void testAddProperty_AddRemoveAddProperty_Success() {
        ChatFunctionProperty property1 = new ChatFunctionProperty();
        property1.setName("test1");
        ChatFunctionProperty property2 = new ChatFunctionProperty();
        property2.setName("test2");
        builderUnderTest.addProperty(property1);
        builderUnderTest.parameters.getProperties().remove("test1");
        builderUnderTest.addProperty(property2);
        assertNull(builderUnderTest.parameters.getProperties().get("test1"));
        assertEquals(property2, builderUnderTest.parameters.getProperties().get("test2"));
    }

    @Test
    public void testAddProperty_ReturnsBuilder_Success() {
        ChatFunctionProperty property = new ChatFunctionProperty();
        property.setName("test");
        Builder result = builderUnderTest.addProperty(property);
        assertEquals(builderUnderTest, result);
    }
}
