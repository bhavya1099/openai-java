// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Null input
   Test whether the function correctly handles null input. The function should throw a NullPointerException if null is passed as the name.

2. Scenario: Empty string
   Check if the function correctly handles an empty string input. Depending on the business logic, the function might either accept it or throw an IllegalArgumentException.

3. Scenario: Normal function
   Test the function with a normal string input. The function should return a Builder object with the name set to the input string.

4. Scenario: Long string
   Test the function with a very long string input. This is to check if there is a maximum length for the name. The function might either accept the string and truncate it, or throw an IllegalArgumentException.

5. Scenario: Special characters
   Test the function with a string containing special characters. Depending on the business logic, the function might either accept the string or throw an IllegalArgumentException.

6. Scenario: Numeric characters
   Test the function with a string containing numeric characters. Depending on the business logic, the function might either accept the string or throw an IllegalArgumentException.

7. Scenario: White space
   Test the function with a string containing leading, trailing, or multiple sequential white spaces. The function might either accept the string as it is, trim the white spaces, or throw an IllegalArgumentException.

8. Scenario: Non-ASCII characters
   Test the function with a string containing non-ASCII characters. Depending on the business logic, the function might either accept the string or throw an IllegalArgumentException.

9. Scenario: Case sensitivity
   Test the function with a string in different cases to check if the function is case-sensitive.

10. Scenario: Builder object state
    Test if the function correctly changes the state of the Builder object. After the function is called, the name of the Builder object should be the same as the input string.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ChatFunction_name_d9b24fa545_Test {
    private Builder builder;

    @Before
    public void setUp() {
        builder = new Builder();
    }

    @Test(expected = NullPointerException.class)
    public void testNullInput() {
        builder.name(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testEmptyString() {
        builder.name("");
    }

    @Test
    public void testNormalFunction() {
        String testName = "testName";
        assertEquals(builder.name(testName).getName(), testName);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testLongString() {
        String longName = new String(new char[1000]).replace("\0", "a");
        builder.name(longName);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testSpecialCharacters() {
        builder.name("@#^&*()!");
    }

    @Test(expected = IllegalArgumentException.class)
    public void testNumericCharacters() {
        builder.name("1234567890");
    }

    @Test
    public void testWhiteSpace() {
        String nameWithSpaces = " test name ";
        assertEquals(builder.name(nameWithSpaces).getName().trim(), nameWithSpaces.trim());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testNonASCIICharacters() {
        builder.name("テスト名");
    }

    @Test
    public void testCaseSensitivity() {
        String lowerCaseName = "testname";
        String upperCaseName = "TESTNAME";
        assertNotEquals(builder.name(lowerCaseName).getName(), builder.name(upperCaseName).getName());
    }

    @Test
    public void testBuilderObjectState() {
        String testName = "testName";
        builder.name(testName);
        assertEquals(builder.getName(), testName);
    }
}
