// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Null input
   - Description: Test the function with a null input to see how it handles it.
   - Expected outcome: As the function does not include null checks, it may potentially lead to a NullPointerException.

2. Scenario: Empty String 
   - Description: Test the function with an empty string as input.
   - Expected outcome: The function should accept the empty string and set the name to an empty string.

3. Scenario: Normal String Input
   - Description: Test the function with a regular string (e.g. "John Doe").
   - Expected outcome: The function should accept the string and set the name to the given string.

4. Scenario: Numeric String Input
   - Description: Test the function with a numeric string (e.g. "1234").
   - Expected outcome: The function should accept the numeric string and set the name to the given string.

5. Scenario: Special Characters String
   - Description: Test the function with a string containing special characters (e.g. "!@#$%").
   - Expected outcome: The function should accept the string and set the name to the given string.

6. Scenario: Long String 
   - Description: Test the function with a very long string.
   - Expected outcome: The function should accept the long string and set the name to the given string. However, if there are any length limitations for the 'name' field, it should throw an error.

7. Scenario: Unicode Characters String
   - Description: Test the function with a string containing Unicode characters.
   - Expected outcome: The function should accept the string and set the name to the given string.

8. Scenario: String with leading and trailing spaces
   - Description: Test the function with a string that has leading and trailing spaces.
   - Expected outcome: The function should accept the string and set the name to the given string. The leading and trailing spaces should be included unless there is a trim function applied.

9. Scenario: Repeated Calls
   - Description: Test the function by calling it multiple times with different inputs.
   - Expected outcome: The function should always set the name to the value of the most recent call.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ChatFunction_name_d9b24fa545_Test {
    
    private Builder builder;
    
    @Before
    public void setUp() {
        builder = new Builder();
    }
    
    @Test
    public void testName_NullInput() {
        try {
            builder.name(null);
            fail("Expected NullPointerException");
        } catch (NullPointerException e) {
            // Test Passed
        }
    }
    
    @Test
    public void testName_EmptyString() {
        Builder result = builder.name("");
        assertNotNull(result);
        assertEquals("", result.getName());
    }
    
    @Test
    public void testName_NormalStringInput() {
        Builder result = builder.name("John Doe");
        assertNotNull(result);
        assertEquals("John Doe", result.getName());
    }
    
    @Test
    public void testName_NumericStringInput() {
        Builder result = builder.name("1234");
        assertNotNull(result);
        assertEquals("1234", result.getName());
    }
    
    @Test
    public void testName_SpecialCharactersString() {
        Builder result = builder.name("!@#$%");
        assertNotNull(result);
        assertEquals("!@#$%", result.getName());
    }
    
    @Test
    public void testName_LongString() {
        // TODO: Replace with a string longer than the maximum allowed length
        String longString = "This is a very long string...";
        Builder result = builder.name(longString);
        assertNotNull(result);
        assertEquals(longString, result.getName());
    }
    
    @Test
    public void testName_UnicodeCharactersString() {
        Builder result = builder.name("こんにちは");
        assertNotNull(result);
        assertEquals("こんにちは", result.getName());
    }
    
    @Test
    public void testName_StringWithLeadingAndTrailingSpaces() {
        Builder result = builder.name(" John Doe ");
        assertNotNull(result);
        assertEquals(" John Doe ", result.getName());
    }
    
    @Test
    public void testName_RepeatedCalls() {
        builder.name("John Doe");
        Builder result = builder.name("Jane Doe");
        assertNotNull(result);
        assertEquals("Jane Doe", result.getName());
    }
}
