// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate the build function with a valid `name`, `description`, and `parameters`.
    - **Test Case:** Execute the build function with a valid `name` (non-null and non-empty), `description`, and `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object with the same `name`, `description`, and `parameters`. 

2. **Scenario:** Validate the build function with a null `name`.
    - **Test Case:** Execute the build function with a null `name`, any `description`, and `parameters`.
    - **Expected Result:** The function should throw a `NullPointerException` due to the `@NonNull` annotation on the `name` field.

3. **Scenario:** Validate the build function with an empty `name`.
    - **Test Case:** Execute the build function with an empty `name`, any `description`, and `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object but the `name` field should be empty.

4. **Scenario:** Validate the build function with a null `description`.
    - **Test Case:** Execute the build function with a valid `name`, a null `description`, and any `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object with the `description` field set as null.

5. **Scenario:** Validate the build function with a null `parameters`.
    - **Test Case:** Execute the build function with a valid `name`, any `description`, and a null `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object with the `parameters` field set as null.

6. **Scenario:** Validate the build function with an empty `parameters`.
    - **Test Case:** Execute the build function with a valid `name`, any `description`, and an empty `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object with the `parameters` field set as empty.

7. **Scenario:** Validate the build function with large data for `name`, `description`, and `parameters`.
    - **Test Case:** Execute the build function with a large data for `name`, `description`, and `parameters`.
    - **Expected Result:** The function should handle the large data and return a `ChatFunctionDynamic` object with the same `name`, `description`, and `parameters`.

8. **Scenario:** Validate the build function with special characters for `name`, `description`, and `parameters`.
    - **Test Case:** Execute the build function with special characters for `name`, `description`, and `parameters`.
    - **Expected Result:** The function should handle the special characters and return a `ChatFunctionDynamic` object with the same `name`, `description`, and `parameters`.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.Test;
import static org.junit.jupiter.api.Assertions.*;

public class ChatFunctionDynamic_build_bb3fca64f1_Test {
    private Builder builder;

    @BeforeEach
    public void setUp() {
        builder = new Builder();
    }

    @Test
    public void testBuild_ValidNameDescriptionParameters() {
        String name = "TestName";
        String description = "TestDescription";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).description(description).parameters(parameters);

        ChatFunctionDynamic chatFunction = builder.build();

        assertEquals(name, chatFunction.getName());
        assertEquals(description, chatFunction.getDescription());
        assertEquals(parameters, chatFunction.getParameters());
    }

    @Test
    public void testBuild_NullName() {
        String description = "TestDescription";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.description(description).parameters(parameters);

        assertThrows(NullPointerException.class, () -> builder.build());
    }

    @Test
    public void testBuild_EmptyName() {
        String name = "";
        String description = "TestDescription";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).description(description).parameters(parameters);

        ChatFunctionDynamic chatFunction = builder.build();

        assertTrue(chatFunction.getName().isEmpty());
        assertEquals(description, chatFunction.getDescription());
        assertEquals(parameters, chatFunction.getParameters());
    }

    @Test
    public void testBuild_NullDescription() {
        String name = "TestName";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).parameters(parameters);

        ChatFunctionDynamic chatFunction = builder.build();

        assertEquals(name, chatFunction.getName());
        assertNull(chatFunction.getDescription());
        assertEquals(parameters, chatFunction.getParameters());
    }

    @Test
    public void testBuild_NullParameters() {
        String name = "TestName";
        String description = "TestDescription";

        builder.name(name).description(description);

        ChatFunctionDynamic chatFunction = builder.build();

        assertEquals(name, chatFunction.getName());
        assertEquals(description, chatFunction.getDescription());
        assertNull(chatFunction.getParameters());
    }

    @Test
    public void testBuild_EmptyParameters() {
        String name = "TestName";
        String description = "TestDescription";
        ChatFunctionParameters parameters = new ChatFunctionParameters();

        builder.name(name).description(description).parameters(parameters);

        ChatFunctionDynamic chatFunction = builder.build();

        assertEquals(name, chatFunction.getName());
        assertEquals(description, chatFunction.getDescription());
        assertTrue(chatFunction.getParameters().getProperties().isEmpty());
    }

    @Test
    public void testBuild_LargeData() {
        String name = new String(new char[1000]).replace("\0", "a");
        String description = new String(new char[1000]).replace("\0", "b");
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).description(description).parameters(parameters);

        ChatFunctionDynamic chatFunction = builder.build();

        assertEquals(name, chatFunction.getName());
        assertEquals(description, chatFunction.getDescription());
        assertEquals(parameters, chatFunction.getParameters());
    }

    @Test
    public void testBuild_SpecialCharacters() {
        String name = "@Test#Name$";
        String description = "%Test&Description*";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).description(description).parameters(parameters);

        ChatFunctionDynamic chatFunction = builder.build();

        assertEquals(name, chatFunction.getName());
        assertEquals(description, chatFunction.getDescription());
        assertEquals(parameters, chatFunction.getParameters());
    }
}
