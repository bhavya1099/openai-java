// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Validate the build function with a valid `name`, `description`, and `parameters`.
    - **Test Case:** Execute the build function with a valid `name` (non-null and non-empty), `description`, and `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object with the same `name`, `description`, and `parameters`. 

2. **Scenario:** Validate the build function with a null `name`.
    - **Test Case:** Execute the build function with a null `name`, any `description`, and `parameters`.
    - **Expected Result:** The function should throw a `NullPointerException`.

3. **Scenario:** Validate the build function with an empty `name`.
    - **Test Case:** Execute the build function with an empty `name`, any `description`, and `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object with an empty `name`, `description`, and `parameters`.

4. **Scenario:** Validate the build function with a null `description`.
    - **Test Case:** Execute the build function with any `name`, a null `description`, and `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object with the `name`, null `description`, and `parameters`.

5. **Scenario:** Validate the build function with null `parameters`.
    - **Test Case:** Execute the build function with any `name`, `description`, and null `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object with the `name`, `description`, and null `parameters`.

6. **Scenario:** Validate the build function with empty `parameters`.
    - **Test Case:** Execute the build function with any `name`, `description`, and empty `parameters`.
    - **Expected Result:** The function should return a `ChatFunctionDynamic` object with the `name`, `description`, and empty `parameters`.

7. **Scenario:** Validate the build function with large data in `name`, `description`, and `parameters`.
    - **Test Case:** Execute the build function with large data in `name`, `description`, and `parameters`.
    - **Expected Result:** The function should handle the large data and return a `ChatFunctionDynamic` object with the same `name`, `description`, and `parameters`. 

8. **Scenario:** Validate the build function with special characters in `name`, `description`, and `parameters`.
    - **Test Case:** Execute the build function with special characters in `name`, `description`, and `parameters`.
    - **Expected Result:** The function should handle the special characters and return a `ChatFunctionDynamic` object with the same `name`, `description`, and `parameters`.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;

public class ChatFunctionDynamic_build_bb3fca64f1_Test {
    private Builder builder;

    @Before
    public void setUp() {
        builder = new Builder();
    }

    @Test
    public void testBuild_ValidParameters() {
        String name = "Test Name";
        String description = "Test Description";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).description(description).parameters(parameters);
        ChatFunctionDynamic result = builder.build();

        assertEquals(name, result.getName());
        assertEquals(description, result.getDescription());
        assertEquals(parameters, result.getParameters());
    }

    @Test(expected = NullPointerException.class)
    public void testBuild_NullName() {
        String description = "Test Description";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(null).description(description).parameters(parameters);
        builder.build();
    }

    @Test
    public void testBuild_EmptyName() {
        String name = "";
        String description = "Test Description";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).description(description).parameters(parameters);
        ChatFunctionDynamic result = builder.build();

        assertEquals(name, result.getName());
        assertEquals(description, result.getDescription());
        assertEquals(parameters, result.getParameters());
    }

    @Test
    public void testBuild_NullDescription() {
        String name = "Test Name";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).description(null).parameters(parameters);
        ChatFunctionDynamic result = builder.build();

        assertNull(result.getDescription());
        assertEquals(name, result.getName());
        assertEquals(parameters, result.getParameters());
    }

    @Test
    public void testBuild_NullParameters() {
        String name = "Test Name";
        String description = "Test Description";

        builder.name(name).description(description).parameters(null);
        ChatFunctionDynamic result = builder.build();

        assertNull(result.getParameters());
        assertEquals(name, result.getName());
        assertEquals(description, result.getDescription());
    }

    @Test
    public void testBuild_EmptyParameters() {
        String name = "Test Name";
        String description = "Test Description";
        ChatFunctionParameters parameters = new ChatFunctionParameters();

        builder.name(name).description(description).parameters(parameters);
        ChatFunctionDynamic result = builder.build();

        assertTrue(result.getParameters().getProperties().isEmpty());
        assertEquals(name, result.getName());
        assertEquals(description, result.getDescription());
    }

    @Test
    public void testBuild_LargeData() {
        String name = new String(new char[1000]).replace("\0", "a");
        String description = new String(new char[1000]).replace("\0", "b");
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).description(description).parameters(parameters);
        ChatFunctionDynamic result = builder.build();

        assertEquals(name, result.getName());
        assertEquals(description, result.getDescription());
        assertEquals(parameters, result.getParameters());
    }

    @Test
    public void testBuild_SpecialCharacters() {
        String name = "@Test#Name$";
        String description = "&Test*Description(";
        ChatFunctionParameters parameters = new ChatFunctionParameters();
        parameters.addProperty(new ChatFunctionProperty());

        builder.name(name).description(description).parameters(parameters);
        ChatFunctionDynamic result = builder.build();

        assertEquals(name, result.getName());
        assertEquals(description, result.getDescription());
        assertEquals(parameters, result.getParameters());
    }
}
