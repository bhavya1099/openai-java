// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify that the `description` method accepts a String input and returns the correct Builder instance.
   Test Steps:
   - Call the `description` method with a valid String input.
   - Check if the returned object is an instance of Builder.

2. Scenario: Verify that the `description` method correctly sets the description value in the Builder instance.
   Test Steps:
   - Call the `description` method with a valid String input.
   - Build the object and retrieve the description.
   - Check if the retrieved description matches the input provided earlier.

3. Scenario: Verify that the `description` method handles null input.
   Test Steps:
   - Call the `description` method with null.
   - Check if the Builder instance is returned without any exceptions.

4. Scenario: Verify that the `description` method handles empty string input.
   Test Steps:
   - Call the `description` method with an empty string.
   - Build the object and retrieve the description.
   - Check if the retrieved description is an empty string.

5. Scenario: Verify that the `description` method handles long string input.
   Test Steps:
   - Create a string longer than the expected maximum length.
   - Call the `description` method with the long string.
   - Build the object and retrieve the description.
   - Check if the retrieved description matches the input provided earlier.

6. Scenario: Verify that the `description` method handles special characters in the string.
   Test Steps:
   - Call the `description` method with a string containing special characters.
   - Build the object and retrieve the description.
   - Check if the retrieved description matches the input provided earlier.

7. Scenario: Verify that the `description` method handles strings with leading and trailing white spaces.
   Test Steps:
   - Call the `description` method with a string containing leading and trailing white spaces.
   - Build the object and retrieve the description.
   - Check if the retrieved description matches the input provided earlier without any leading or trailing white spaces.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Assert;
import org.junit.Test;

public class ChatFunction_description_192aef2aea_Test {

    @Test
    public void testDescriptionMethodReturnsCorrectBuilderInstance() {
        Builder builder = new Builder();
        Builder returnedBuilder = builder.description("Test Description");
        Assert.assertEquals(builder, returnedBuilder);
    }

    @Test
    public void testDescriptionMethodSetsCorrectDescriptionValue() {
        Builder builder = new Builder();
        String testDescription = "Test Description";
        builder.description(testDescription);
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals(testDescription, chatFunction.getDescription());
    }

    @Test
    public void testDescriptionMethodHandlesNullInput() {
        Builder builder = new Builder();
        builder.description(null);
        ChatFunction chatFunction = builder.build();
        Assert.assertNull(chatFunction.getDescription());
    }

    @Test
    public void testDescriptionMethodHandlesEmptyStringInput() {
        Builder builder = new Builder();
        builder.description("");
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals("", chatFunction.getDescription());
    }

    @Test
    public void testDescriptionMethodHandlesLongStringInput() {
        Builder builder = new Builder();
        String longDescription = new String(new char[1000]).replace("\0", "a");
        builder.description(longDescription);
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals(longDescription, chatFunction.getDescription());
    }

    @Test
    public void testDescriptionMethodHandlesSpecialCharacters() {
        Builder builder = new Builder();
        String specialCharactersDescription = "!@#$%^&*()_+";
        builder.description(specialCharactersDescription);
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals(specialCharactersDescription, chatFunction.getDescription());
    }

    @Test
    public void testDescriptionMethodHandlesLeadingAndTrailingWhiteSpaces() {
        Builder builder = new Builder();
        String descriptionWithSpaces = "  Test Description  ";
        builder.description(descriptionWithSpaces);
        ChatFunction chatFunction = builder.build();
        Assert.assertEquals(descriptionWithSpaces.trim(), chatFunction.getDescription());
    }
}
