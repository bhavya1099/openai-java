// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Validate if the `ChatMessage` function accepts valid values for `role`, `content`, and `name` and successfully creates an instance of `ChatMessage`.

2. Test Scenario: Validate if the `ChatMessage` function throws an appropriate exception when `role` is null or empty.

3. Test Scenario: Validate if the `ChatMessage` function throws an appropriate exception when `content` is null or empty.

4. Test Scenario: Validate if the `ChatMessage` function throws an appropriate exception when `name` is null or empty.

5. Test Scenario: Validate if the `ChatMessage` function can handle special characters or numbers in the `role`, `content`, and `name` fields.

6. Test Scenario: Validate if the `ChatMessage` function can handle long strings in the `role`, `content`, and `name` fields.

7. Test Scenario: Validate if the `ChatMessage` function can handle whitespace characters in the `role`, `content`, and `name` fields.

8. Test Scenario: Validate if the `ChatMessage` function can handle unicode characters in the `role`, `content`, and `name` fields.

9. Test Scenario: Validate if the `ChatMessage` function can handle case sensitivity in the `role`, `content`, and `name` fields.

10. Test Scenario: Validate if the `ChatMessage` function can handle different roles like 'admin', 'user', 'moderator' etc.

11. Test Scenario: Validate if the `ChatMessage` function can handle different content types like text, emoji, URLs, etc.

12. Test Scenario: Validate if the `ChatMessage` function can handle different name formats like 'First Last', 'First', 'First M. Last', etc.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import lombok.*;
import org.junit.*;
import static org.junit.Assert.*;

public class ChatMessage_ChatMessage_1cad38f17c_Test {

    @Test
    public void testChatMessageCreationValidInputs() {
        String role = "user";
        String content = "Hello, World!";
        String name = "John Doe";
        ChatMessage chatMessage = new ChatMessage(role, content, name);
        assertEquals(role, chatMessage.getRole());
        assertEquals(content, chatMessage.getContent());
        assertEquals(name, chatMessage.getName());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testChatMessageCreationNullRole() {
        String role = null;
        String content = "Hello, World!";
        String name = "John Doe";
        new ChatMessage(role, content, name);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testChatMessageCreationEmptyRole() {
        String role = "";
        String content = "Hello, World!";
        String name = "John Doe";
        new ChatMessage(role, content, name);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testChatMessageCreationNullContent() {
        String role = "user";
        String content = null;
        String name = "John Doe";
        new ChatMessage(role, content, name);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testChatMessageCreationEmptyContent() {
        String role = "user";
        String content = "";
        String name = "John Doe";
        new ChatMessage(role, content, name);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testChatMessageCreationNullName() {
        String role = "user";
        String content = "Hello, World!";
        String name = null;
        new ChatMessage(role, content, name);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testChatMessageCreationEmptyName() {
        String role = "user";
        String content = "Hello, World!";
        String name = "";
        new ChatMessage(role, content, name);
    }

    @Test
    public void testChatMessageCreationSpecialCharacters() {
        String role = "user@#";
        String content = "Hello, World!@#";
        String name = "John Doe@#";
        ChatMessage chatMessage = new ChatMessage(role, content, name);
        assertEquals(role, chatMessage.getRole());
        assertEquals(content, chatMessage.getContent());
        assertEquals(name, chatMessage.getName());
    }

    @Test
    public void testChatMessageCreationLongStrings() {
        String role = "user".repeat(10000);
        String content = "Hello, World!".repeat(10000);
        String name = "John Doe".repeat(10000);
        ChatMessage chatMessage = new ChatMessage(role, content, name);
        assertEquals(role, chatMessage.getRole());
        assertEquals(content, chatMessage.getContent());
        assertEquals(name, chatMessage.getName());
    }

    @Test
    public void testChatMessageCreationWhitespaceCharacters() {
        String role = "user ";
        String content = "Hello, World! ";
        String name = "John Doe ";
        ChatMessage chatMessage = new ChatMessage(role, content, name);
        assertEquals(role, chatMessage.getRole());
        assertEquals(content, chatMessage.getContent());
        assertEquals(name, chatMessage.getName());
    }

    @Test
    public void testChatMessageCreationUnicodeCharacters() {
        String role = "user\u00A9";
        String content = "Hello, World!\u00A9";
        String name = "John Doe\u00A9";
        ChatMessage chatMessage = new ChatMessage(role, content, name);
        assertEquals(role, chatMessage.getRole());
        assertEquals(content, chatMessage.getContent());
        assertEquals(name, chatMessage.getName());
    }

    @Test
    public void testChatMessageCreationCaseSensitivity() {
        String role = "User";
        String content = "Hello, World!";
        String name = "John Doe";
        ChatMessage chatMessage = new ChatMessage(role, content, name);
        assertEquals(role, chatMessage.getRole());
        assertEquals(content, chatMessage.getContent());
        assertEquals(name, chatMessage.getName());
    }

    @Test
    public void testChatMessageCreationDifferentRoles() {
        String role = "admin";
        String content = "Hello, World!";
        String name = "John Doe";
        ChatMessage chatMessage = new ChatMessage(role, content, name);
        assertEquals(role, chatMessage.getRole());
        assertEquals(content, chatMessage.getContent());
        assertEquals(name, chatMessage.getName());
    }

    @Test
    public void testChatMessageCreationDifferentContentTypes() {
        String role = "user";
        String content = "ðŸ˜€";
        String name = "John Doe";
        ChatMessage chatMessage = new ChatMessage(role, content, name);
        assertEquals(role, chatMessage.getRole());
        assertEquals(content, chatMessage.getContent());
        assertEquals(name, chatMessage.getName());
    }

    @Test
    public void testChatMessageCreationDifferentNameFormats() {
        String role = "user";
        String content = "Hello, World!";
        String name = "First Last";
        ChatMessage chatMessage = new ChatMessage(role, content, name);
        assertEquals(role, chatMessage.getRole());
        assertEquals(content, chatMessage.getContent());
        assertEquals(name, chatMessage.getName());
    }
}
