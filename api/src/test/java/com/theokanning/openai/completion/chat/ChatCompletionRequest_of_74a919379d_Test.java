// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Validate that the function successfully creates a new instance of `ChatCompletionRequestFunctionCall` when a valid `name` string is provided.
   - Input: A valid `name` string
   - Expected Output: A new instance of `ChatCompletionRequestFunctionCall` with `name` value set as the input string

2. Scenario: Check if the function can handle `null` as `name` input.
   - Input: `null` as `name`
   - Expected Output: A new instance of `ChatCompletionRequestFunctionCall` with `name` value set as `null` or an exception (based on the implementation of `ChatCompletionRequestFunctionCall`)

3. Scenario: Validate that the function can handle empty strings as `name`.
   - Input: Empty string for `name`
   - Expected Output: A new instance of `ChatCompletionRequestFunctionCall` with `name` value set as an empty string or an exception (based on the implementation of `ChatCompletionRequestFunctionCall`)

4. Scenario: Check if the function can handle extremely large strings for `name`.
   - Input: A very large string for `name`
   - Expected Output: A new instance of `ChatCompletionRequestFunctionCall` with `name` value set as the large string or an exception (based on the implementation of `ChatCompletionRequestFunctionCall`)

5. Scenario: Validate that the function can handle special characters in `name`.
   - Input: String with special characters for `name`
   - Expected Output: A new instance of `ChatCompletionRequestFunctionCall` with `name` value set as the string with special characters or an exception (based on the implementation of `ChatCompletionRequestFunctionCall`)

6. Scenario: Check if the function can handle non-English characters in `name`.
   - Input: String with non-English characters for `name`
   - Expected Output: A new instance of `ChatCompletionRequestFunctionCall` with `name` value set as the string with non-English characters or an exception (based on the implementation of `ChatCompletionRequestFunctionCall`)
   
7. Scenario: Validate that the function can handle numeric strings as `name`.
   - Input: Numeric string for `name`
   - Expected Output: A new instance of `ChatCompletionRequestFunctionCall` with `name` value set as the numeric string or an exception (based on the implementation of `ChatCompletionRequestFunctionCall`)
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Test;
import static org.junit.Assert.*;

public class ChatCompletionRequest_of_74a919379d_Test {

    @Test
    public void testOf_withValidName() {
        String name = "testName";
        ChatCompletionRequestFunctionCall result = ChatCompletionRequestFunctionCall.of(name);
        assertNotNull(result);
        assertEquals(name, result.getName());
    }

    @Test
    public void testOf_withNullName() {
        String name = null;
        ChatCompletionRequestFunctionCall result = ChatCompletionRequestFunctionCall.of(name);
        assertNotNull(result);
        assertNull(result.getName());
    }

    @Test
    public void testOf_withEmptyName() {
        String name = "";
        ChatCompletionRequestFunctionCall result = ChatCompletionRequestFunctionCall.of(name);
        assertNotNull(result);
        assertEquals(name, result.getName());
    }

    @Test
    public void testOf_withLargeName() {
        String name = new String(new char[10000]).replace("\0", "a");
        ChatCompletionRequestFunctionCall result = ChatCompletionRequestFunctionCall.of(name);
        assertNotNull(result);
        assertEquals(name, result.getName());
    }

    @Test
    public void testOf_withSpecialCharName() {
        String name = "test@Name";
        ChatCompletionRequestFunctionCall result = ChatCompletionRequestFunctionCall.of(name);
        assertNotNull(result);
        assertEquals(name, result.getName());
    }

    @Test
    public void testOf_withNonEnglishName() {
        String name = "测试名称";
        ChatCompletionRequestFunctionCall result = ChatCompletionRequestFunctionCall.of(name);
        assertNotNull(result);
        assertEquals(name, result.getName());
    }

    @Test
    public void testOf_withNumericName() {
        String name = "123456";
        ChatCompletionRequestFunctionCall result = ChatCompletionRequestFunctionCall.of(name);
        assertNotNull(result);
        assertEquals(name, result.getName());
    }
}
