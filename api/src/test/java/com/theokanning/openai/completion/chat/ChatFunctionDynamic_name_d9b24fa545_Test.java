// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. **Scenario: Null Argument**
   - Test if the function throws an exception when a null argument is passed to the name function. As per the "@NonNull" annotation, the function should throw a NullPointerException in this case.

2. **Scenario: Empty String Argument**
   - Test if the function accepts an empty string as an argument. Even though the argument is not null, it doesn't contain any characters, which might not be a valid name.

3. **Scenario: Valid String Argument**
   - Test if the function can correctly set the 'name' variable when a valid string is passed as an argument. The 'name' variable should be equal to the string passed to the function.

4. **Scenario: Special Characters in Argument**
   - Test if the function can handle special characters. Pass a string with special characters to the function and verify if the 'name' variable is set correctly.

5. **Scenario: Numerical String Argument**
   - Test if the function can handle numerical strings. Pass a numerical string to the function and verify if the 'name' variable is set correctly.

6. **Scenario: Long String Argument**
   - Test if the function can handle long strings. Pass a very long string to the function and verify if the 'name' variable is set correctly.

7. **Scenario: Return Type**
   - Test if the function returns an instance of the Builder class. The function should return 'this', which is an instance of the Builder class.

8. **Scenario: Multiple Calls**
   - Test if the function can handle multiple calls. Call the function multiple times with different arguments and verify if the 'name' variable is updated correctly each time.

9. **Scenario: Non-English Characters in Argument**
   - Test if the function can handle non-English characters. Pass a string with non-English characters to the function and verify if the 'name' variable is set correctly.

10. **Scenario: Whitespace in Argument**
   - Test if the function can handle strings with whitespace. Pass a string with leading, trailing, or in-between whitespace to the function and verify if the 'name' variable is set correctly.
*/

// ********RoostGPT********
package com.theokanning.openai.completion.chat;

import org.junit.Test;
import org.junit.Assert;
import org.junit.Before;

public class ChatFunctionDynamic_name_d9b24fa545_Test {

    private Builder builder;

    @Before
    public void setUp() {
        builder = new Builder();
    }

    @Test(expected = NullPointerException.class)
    public void testName_NullArgument() {
        builder.name(null);
    }

    @Test
    public void testName_EmptyStringArgument() {
        Builder result = builder.name("");
        Assert.assertEquals("", result.getName());
    }

    @Test
    public void testName_ValidStringArgument() {
        Builder result = builder.name("test");
        Assert.assertEquals("test", result.getName());
    }

    @Test
    public void testName_SpecialCharactersInArgument() {
        Builder result = builder.name("@#$$%^&*(");
        Assert.assertEquals("@#$$%^&*(", result.getName());
    }

    @Test
    public void testName_NumericalStringArgument() {
        Builder result = builder.name("12345");
        Assert.assertEquals("12345", result.getName());
    }

    @Test
    public void testName_LongStringArgument() {
        String longString = new String(new char[1000]).replace("\0", "a");
        Builder result = builder.name(longString);
        Assert.assertEquals(longString, result.getName());
    }

    @Test
    public void testName_ReturnType() {
        Assert.assertTrue(builder.name("test") instanceof Builder);
    }

    @Test
    public void testName_MultipleCalls() {
        Builder result = builder.name("test1").name("test2");
        Assert.assertEquals("test2", result.getName());
    }

    @Test
    public void testName_NonEnglishCharactersInArgument() {
        Builder result = builder.name("测试");
        Assert.assertEquals("测试", result.getName());
    }

    @Test
    public void testName_WhitespaceInArgument() {
        Builder result = builder.name(" test ");
        Assert.assertEquals(" test ", result.getName());
    }
}
