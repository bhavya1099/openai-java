// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Test Scenario: Check if the `setObjectMapper` method sets the ObjectMapper correctly.
    - Input: Create an ObjectMapper instance and set it using `setObjectMapper`.
    - Expected Output: The `MAPPER` field should be set to the given ObjectMapper instance.

2. Test Scenario: Check if the `setObjectMapper` method can handle null values.
    - Input: Call `setObjectMapper` with a null value.
    - Expected Output: The `MAPPER` field should be set to null.

3. Test Scenario: Check if the `setObjectMapper` method can handle multiple calls.
    - Input: Call `setObjectMapper` multiple times with different ObjectMapper instances.
    - Expected Output: The `MAPPER` field should be set to the ObjectMapper instance given in the last call.

4. Test Scenario: Check if the `setObjectMapper` method can handle ObjectMapper instances with different configurations.
    - Input: Create ObjectMapper instances with different configurations, and set them using `setObjectMapper`.
    - Expected Output: The `MAPPER` field should be set to the ObjectMapper instance with the corresponding configurations. 

5. Test Scenario: Check if the `setObjectMapper` method does not affect other instances of the class.
    - Input: Create multiple instances of the class and call `setObjectMapper` on one of them.
    - Expected Output: The `MAPPER` field of the other instances should remain unaffected.

6. Test Scenario: Check if the `setObjectMapper` method does not affect the ObjectMapper instance given as argument.
    - Input: Create an ObjectMapper instance, set it using `setObjectMapper`, and make a change in the ObjectMapper instance.
    - Expected Output: The `MAPPER` field should not reflect the change made in the ObjectMapper instance after it was set.
*/

// ********RoostGPT********
import com.fasterxml.jackson.databind.ObjectMapper;
import com.theokanning.openai.service.FunctionExecutor;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertNotEquals;

public class FunctionExecutor_setObjectMapper_0e99a5942e_Test {
    private FunctionExecutor functionExecutor;

    @Before
    public void setUp() {
        functionExecutor = new FunctionExecutor(new ArrayList<>());
    }

    @Test
    public void testSetObjectMapper() {
        ObjectMapper objectMapper = new ObjectMapper();
        functionExecutor.setObjectMapper(objectMapper);
        assertEquals(objectMapper, functionExecutor.MAPPER);
    }

    @Test
    public void testSetObjectMapperWithNull() {
        functionExecutor.setObjectMapper(null);
        assertEquals(null, functionExecutor.MAPPER);
    }

    @Test
    public void testSetObjectMapperMultipleTimes() {
        ObjectMapper objectMapper1 = new ObjectMapper();
        ObjectMapper objectMapper2 = new ObjectMapper();
        functionExecutor.setObjectMapper(objectMapper1);
        functionExecutor.setObjectMapper(objectMapper2);
        assertEquals(objectMapper2, functionExecutor.MAPPER);
        assertNotEquals(objectMapper1, functionExecutor.MAPPER);
    }

    @Test
    public void testSetObjectMapperWithDifferentConfigurations() {
        ObjectMapper objectMapper1 = new ObjectMapper().enableDefaultTyping();
        ObjectMapper objectMapper2 = new ObjectMapper().disableDefaultTyping();
        functionExecutor.setObjectMapper(objectMapper1);
        assertEquals(objectMapper1, functionExecutor.MAPPER);
        functionExecutor.setObjectMapper(objectMapper2);
        assertEquals(objectMapper2, functionExecutor.MAPPER);
    }

    @Test
    public void testSetObjectMapperDoesNotAffectOtherInstances() {
        FunctionExecutor functionExecutor2 = new FunctionExecutor(new ArrayList<>());
        ObjectMapper objectMapper = new ObjectMapper();
        functionExecutor.setObjectMapper(objectMapper);
        assertNotEquals(objectMapper, functionExecutor2.MAPPER);
    }

    @Test
    public void testSetObjectMapperDoesNotAffectArgument() {
        ObjectMapper objectMapper = new ObjectMapper();
        functionExecutor.setObjectMapper(objectMapper);
        objectMapper.enableDefaultTyping();
        assertNotEquals(objectMapper, functionExecutor.MAPPER);
    }
}
