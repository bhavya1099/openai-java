// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Verify that the `executeAndConvertToMessage` function returns a `ChatMessage` object when a valid `ChatFunctionCall` object is passed.
   - **Test:** Pass a valid `ChatFunctionCall` object and check if the returned object is an instance of `ChatMessage`.

2. **Scenario:** Verify that the `executeAndConvertToMessage` function correctly assigns the `ChatMessageRole.FUNCTION.value()` to the `role` field of the returned `ChatMessage`.
   - **Test:** Check if the `role` field of the returned `ChatMessage` object is `ChatMessageRole.FUNCTION.value()`.

3. **Scenario:** Verify that the `executeAndConvertToMessage` function correctly assigns the `executeAndConvertToJson(call).toPrettyString()` to the `content` field of the returned `ChatMessage`.
   - **Test:** Check if the `content` field of the returned `ChatMessage` object is `executeAndConvertToJson(call).toPrettyString()`.

4. **Scenario:** Verify that the `executeAndConvertToMessage` function correctly assigns the `call.getName()` to the `name` field of the returned `ChatMessage`.
   - **Test:** Check if the `name` field of the returned `ChatMessage` object is `call.getName()`.

5. **Scenario:** Verify that the `executeAndConvertToMessage` function handles `JsonProcessingException` correctly when `executeAndConvertToJson(call)` throws this exception.
   - **Test:** Mock `executeAndConvertToJson(call)` to throw `JsonProcessingException` and check how the function handles it.

6. **Scenario:** Verify that the `executeAndConvertToMessage` function handles null `ChatFunctionCall` objects correctly.
   - **Test:** Pass a null `ChatFunctionCall` object and check how the function handles it.

7. **Scenario:** Verify that the `executeAndConvertToMessage` function handles `ChatFunctionCall` objects with null or empty `name` field correctly.
   - **Test:** Pass a `ChatFunctionCall` object with null or empty `name` field and check how the function handles it.
*/

// ********RoostGPT********
package com.theokanning.openai.service;

import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class FunctionExecutor_executeAndConvertToMessage_ddf26f6b8f_Test {

    @Mock
    private FunctionExecutor functionExecutor;

    @Mock
    private ChatFunctionCall chatFunctionCall;

    @Before
    public void setUp() {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testExecuteAndConvertToMessage_ValidChatFunctionCall() {
        when(functionExecutor.executeAndConvertToMessage(chatFunctionCall))
            .thenReturn(new ChatMessage(ChatMessageRole.FUNCTION.value(), "content", "name"));

        ChatMessage result = functionExecutor.executeAndConvertToMessage(chatFunctionCall);

        assertNotNull(result);
        assertEquals(ChatMessageRole.FUNCTION.value(), result.getRole());
        assertEquals("content", result.getContent());
        assertEquals("name", result.getName());
    }

    @Test(expected = JsonProcessingException.class)
    public void testExecuteAndConvertToMessage_ThrowsJsonProcessingException() {
        when(functionExecutor.executeAndConvertToMessage(chatFunctionCall))
            .thenThrow(JsonProcessingException.class);

        functionExecutor.executeAndConvertToMessage(chatFunctionCall);
    }

    @Test(expected = NullPointerException.class)
    public void testExecuteAndConvertToMessage_NullChatFunctionCall() {
        functionExecutor.executeAndConvertToMessage(null);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testExecuteAndConvertToMessage_EmptyName() {
        when(chatFunctionCall.getName()).thenReturn("");

        functionExecutor.executeAndConvertToMessage(chatFunctionCall);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testExecuteAndConvertToMessage_NullName() {
        when(chatFunctionCall.getName()).thenReturn(null);

        functionExecutor.executeAndConvertToMessage(chatFunctionCall);
    }
}
