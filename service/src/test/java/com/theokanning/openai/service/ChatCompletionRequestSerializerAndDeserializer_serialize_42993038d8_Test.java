// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Null `ChatCompletionRequestFunctionCall` Value
   - Description: The function should handle null `ChatCompletionRequestFunctionCall` values gracefully by writing null to the `JsonGenerator`.
   - Input: Null `ChatCompletionRequestFunctionCall` value.
   - Expected Output: Null written to `JsonGenerator`.

2. Scenario: `ChatCompletionRequestFunctionCall` Value's Name is Null
   - Description: The function should handle `ChatCompletionRequestFunctionCall` values with null names gracefully by writing null to the `JsonGenerator`.
   - Input: `ChatCompletionRequestFunctionCall` value with a null name.
   - Expected Output: Null written to `JsonGenerator`.

3. Scenario: `ChatCompletionRequestFunctionCall` Value's Name is "none"
   - Description: The function should handle `ChatCompletionRequestFunctionCall` values with name "none" by writing "none" to the `JsonGenerator`.
   - Input: `ChatCompletionRequestFunctionCall` value with name "none".
   - Expected Output: "none" written to `JsonGenerator`.

4. Scenario: `ChatCompletionRequestFunctionCall` Value's Name is "auto"
   - Description: The function should handle `ChatCompletionRequestFunctionCall` values with name "auto" by writing "auto" to the `JsonGenerator`.
   - Input: `ChatCompletionRequestFunctionCall` value with name "auto".
   - Expected Output: "auto" written to `JsonGenerator`.

5. Scenario: `ChatCompletionRequestFunctionCall` Value's Name is neither null, "none", nor "auto"
   - Description: The function should handle `ChatCompletionRequestFunctionCall` values with a name that is neither null, "none", nor "auto" by writing a JSON object with a single field "name" and the value of the name to the `JsonGenerator`.
   - Input: `ChatCompletionRequestFunctionCall` value with a name that is neither null, "none", nor "auto".
   - Expected Output: A JSON object written to `JsonGenerator` in the form `{"name": "<value.getName()>"}`.

6. Scenario: IOException
   - Description: The function should throw an IOException when there are issues with writing to the `JsonGenerator`.
   - Input: Any input that would cause an IOException (this would likely be due to an issue with the `JsonGenerator` rather than the input).
   - Expected Output: An IOException is thrown.
*/

// ********RoostGPT********
package com.theokanning.openai.service;

import com.fasterxml.jackson.core.JsonGenerator;
import com.fasterxml.jackson.core.JsonProcessingException;
import com.fasterxml.jackson.databind.SerializerProvider;
import com.theokanning.openai.completion.chat.ChatCompletionRequest;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import java.io.IOException;

import static org.mockito.Mockito.*;

public class ChatCompletionRequestSerializerAndDeserializer_serialize_42993038d8_Test {
    private Deserializer deserializer;

    @Mock
    private JsonGenerator jsonGenerator;

    @Mock
    private SerializerProvider serializerProvider;

    @Before
    public void setup() {
        MockitoAnnotations.initMocks(this);
        deserializer = new Deserializer();
    }

    @Test
    public void testSerialize_NullValue() throws IOException {
        deserializer.serialize(null, jsonGenerator, serializerProvider);
        verify(jsonGenerator).writeNull();
    }

    @Test
    public void testSerialize_NullName() throws IOException {
        ChatCompletionRequest.ChatCompletionRequestFunctionCall value = new ChatCompletionRequest.ChatCompletionRequestFunctionCall(null);
        deserializer.serialize(value, jsonGenerator, serializerProvider);
        verify(jsonGenerator).writeNull();
    }

    @Test
    public void testSerialize_NameIsNone() throws IOException {
        ChatCompletionRequest.ChatCompletionRequestFunctionCall value = new ChatCompletionRequest.ChatCompletionRequestFunctionCall("none");
        deserializer.serialize(value, jsonGenerator, serializerProvider);
        verify(jsonGenerator).writeString("none");
    }

    @Test
    public void testSerialize_NameIsAuto() throws IOException {
        ChatCompletionRequest.ChatCompletionRequestFunctionCall value = new ChatCompletionRequest.ChatCompletionRequestFunctionCall("auto");
        deserializer.serialize(value, jsonGenerator, serializerProvider);
        verify(jsonGenerator).writeString("auto");
    }

    @Test
    public void testSerialize_RegularName() throws IOException {
        ChatCompletionRequest.ChatCompletionRequestFunctionCall value = new ChatCompletionRequest.ChatCompletionRequestFunctionCall("regular");
        deserializer.serialize(value, jsonGenerator, serializerProvider);
        verify(jsonGenerator).writeStartObject();
        verify(jsonGenerator).writeFieldName("name");
        verify(jsonGenerator).writeString("regular");
        verify(jsonGenerator).writeEndObject();
    }

    @Test(expected = JsonProcessingException.class)
    public void testSerialize_IOException() throws IOException {
        doThrow(JsonProcessingException.class).when(jsonGenerator).writeStartObject();
        ChatCompletionRequest.ChatCompletionRequestFunctionCall value = new ChatCompletionRequest.ChatCompletionRequestFunctionCall("regular");
        deserializer.serialize(value, jsonGenerator, serializerProvider);
    }
}
