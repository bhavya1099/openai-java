// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify if the `getChatFunctionCallChunk()` method returns a valid `ChatFunctionCall` object when the `getMessageChunk()` method returns a valid `ChatMessage` object with a `ChatFunctionCall` object.

2. Scenario: Verify if the `getChatFunctionCallChunk()` method returns `null` when the `getMessageChunk()` method returns a `ChatMessage` object without a `ChatFunctionCall` object.

3. Scenario: Verify if the `getChatFunctionCallChunk()` method throws an exception when the `getMessageChunk()` method returns `null`.

4. Scenario: Verify if the `getChatFunctionCallChunk()` method returns the correct `ChatFunctionCall` object when the `getMessageChunk()` method returns a `ChatMessage` object with multiple `ChatFunctionCall` objects.

5. Scenario: Verify if the `getChatFunctionCallChunk()` method returns the latest `ChatFunctionCall` object when the `getMessageChunk()` method returns a `ChatMessage` object with multiple `ChatFunctionCall` objects in a sequence.

6. Scenario: Verify if the `getChatFunctionCallChunk()` method handles exceptions correctly when the `getMessageChunk()` method throws an exception.

7. Scenario: Verify if the `getChatFunctionCallChunk()` method can handle and return a large `ChatFunctionCall` object when the `getMessageChunk()` method returns a large `ChatMessage` object.

8. Scenario: Verify if the `getChatFunctionCallChunk()` method returns the correct `ChatFunctionCall` object when the `getMessageChunk()` method returns a `ChatMessage` object with nested `ChatFunctionCall` objects.

9. Scenario: Verify if the `getChatFunctionCallChunk()` method returns an empty `ChatFunctionCall` object when the `getMessageChunk()` method returns an empty `ChatMessage` object.

10. Scenario: Verify if the `getChatFunctionCallChunk()` method returns a `ChatFunctionCall` object with the correct properties when the `getMessageChunk()` method returns a `ChatMessage` object with a `ChatFunctionCall` object with specific properties.
*/

// ********RoostGPT********
package com.theokanning.openai.service;

import com.theokanning.openai.completion.chat.ChatFunctionCall;
import com.theokanning.openai.completion.chat.ChatMessage;
import org.junit.Before;
import org.junit.Test;
import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class ChatMessageAccumulator_getChatFunctionCallChunk_2855dbdb24_Test {

    private ChatMessageAccumulator chatMessageAccumulator;
    private ChatMessage messageChunk;
    private ChatMessage accumulatedMessage;

    @Before
    public void setUp() {
        messageChunk = mock(ChatMessage.class);
        accumulatedMessage = mock(ChatMessage.class);
        chatMessageAccumulator = new ChatMessageAccumulator(messageChunk, accumulatedMessage);
    }

    @Test
    public void testGetChatFunctionCallChunk_ValidFunctionCall() {
        ChatFunctionCall functionCall = new ChatFunctionCall();
        when(messageChunk.getFunctionCall()).thenReturn(functionCall);

        ChatFunctionCall result = chatMessageAccumulator.getChatFunctionCallChunk();

        assertEquals(functionCall, result);
    }

    @Test
    public void testGetChatFunctionCallChunk_NoFunctionCall() {
        when(messageChunk.getFunctionCall()).thenReturn(null);

        ChatFunctionCall result = chatMessageAccumulator.getChatFunctionCallChunk();

        assertNull(result);
    }

    @Test(expected = NullPointerException.class)
    public void testGetChatFunctionCallChunk_NullMessageChunk() {
        when(messageChunk.getFunctionCall()).thenThrow(new NullPointerException());

        chatMessageAccumulator.getChatFunctionCallChunk();
    }
}
