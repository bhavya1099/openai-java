// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Verify the function when a valid token is provided.
   Description: This scenario is to verify whether the function can successfully add an authorization header to the request when a valid token is provided.

2. Scenario: Verify the function when an invalid token is provided.
   Description: This scenario is to verify whether the function can handle the situation when an invalid token is provided.

3. Scenario: Verify the function when a null token is provided.
   Description: This scenario is to verify whether the function can handle the situation when a null token is provided. It should not throw a NullPointerException.

4. Scenario: Verify the function when an empty token is provided.
   Description: This scenario is to verify whether the function can handle the situation when an empty token is provided. It should not throw an error and should add the header with an empty value.

5. Scenario: Verify the function with multiple calls.
   Description: This scenario is to verify whether the function can handle multiple successive calls without any problems.

6. Scenario: Verify the function with different types of requests.
   Description: This scenario is to verify whether the function can handle different types of requests (GET, POST, DELETE, etc.) and correctly add the authorization header.

7. Scenario: Verify the function when the request already has an Authorization header.
   Description: This scenario is to verify whether the function can handle the situation when the request already has an Authorization header. It should replace the existing header with the new one.

8. Scenario: Verify the function when the chain is null.
   Description: This scenario is to verify whether the function can handle the situation when the chain is null. It should throw a NullPointerException.

9. Scenario: Verify the function when the chain's request is null.
   Description: This scenario is to verify whether the function can handle the situation when the chain's request is null. It should throw a NullPointerException.

10. Scenario: Verify the function when there's an IOException.
    Description: This scenario is to verify whether the function can handle an IOException correctly when it's thrown by the chain.proceed(request) call.
*/

// ********RoostGPT********
package com.theokanning.openai.service;

import okhttp3.*;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.io.IOException;

import static org.junit.Assert.*;
import static org.mockito.Mockito.when;

public class AuthenticationInterceptor_intercept_2ab5e828da_Test {
    private AuthenticationInterceptor interceptor;
    private String token;
    private Interceptor.Chain chain;
    private Request request;
    private Response response;

    @Before
    public void setUp() {
        token = "validToken";
        interceptor = new AuthenticationInterceptor(token);

        chain = Mockito.mock(Interceptor.Chain.class);
        request = new Request.Builder().url("http://localhost").build();
        response = new Response.Builder().request(request).protocol(Protocol.HTTP_1_1).code(200).build();
    }

    @Test
    public void testIntercept_validToken() throws IOException {
        when(chain.request()).thenReturn(request);
        when(chain.proceed(request)).thenReturn(response);

        Response actualResponse = interceptor.intercept(chain);

        assertEquals(response, actualResponse);
        assertEquals("Bearer " + token, actualResponse.request().header("Authorization"));
    }

    @Test(expected = NullPointerException.class)
    public void testIntercept_nullToken() throws IOException {
        interceptor = new AuthenticationInterceptor(null);
        interceptor.intercept(chain);
    }

    @Test
    public void testIntercept_emptyToken() throws IOException {
        interceptor = new AuthenticationInterceptor("");
        when(chain.request()).thenReturn(request);
        when(chain.proceed(request)).thenReturn(response);

        Response actualResponse = interceptor.intercept(chain);

        assertEquals(response, actualResponse);
        assertEquals("Bearer ", actualResponse.request().header("Authorization"));
    }

    @Test(expected = NullPointerException.class)
    public void testIntercept_nullChain() throws IOException {
        interceptor.intercept(null);
    }

    @Test(expected = NullPointerException.class)
    public void testIntercept_nullRequestInChain() throws IOException {
        when(chain.request()).thenReturn(null);
        interceptor.intercept(chain);
    }

    @Test(expected = IOException.class)
    public void testIntercept_ioException() throws IOException {
        when(chain.request()).thenReturn(request);
        when(chain.proceed(request)).thenThrow(new IOException());

        interceptor.intercept(chain);
    }
}
