// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. **Scenario:** Verify the function behavior when given a valid `ChatFunctionCall` object.
   - **Test:** Pass a valid `ChatFunctionCall` object to the `executeAndConvertToMessageSafely` function. 
   - **Expected Result:** The function should return an `Optional` object containing a `ChatMessage`.

2. **Scenario:** Verify the function behavior when given an invalid `ChatFunctionCall` object.
   - **Test:** Pass an invalid `ChatFunctionCall` object to the `executeAndConvertToMessageSafely` function.
   - **Expected Result:** The function should return an `Optional.empty()` object.

3. **Scenario:** Verify the function behavior when given a `ChatFunctionCall` object that causes `executeAndConvertToMessage` to throw an exception.
   - **Test:** Pass a `ChatFunctionCall` object to the `executeAndConvertToMessageSafely` function that causes `executeAndConvertToMessage` to throw an exception.
   - **Expected Result:** The function should return an `Optional.empty()` object.

4. **Scenario:** Verify the function behavior when given a null `ChatFunctionCall` object.
   - **Test:** Pass a null `ChatFunctionCall` object to the `executeAndConvertToMessageSafely` function.
   - **Expected Result:** The function should return an `Optional.empty()` object.

5. **Scenario:** Verify the function behavior when given a `ChatFunctionCall` object with different roles and types.
   - **Test:** Pass a `ChatFunctionCall` object with different roles and types to the `executeAndConvertToMessageSafely` function.
   - **Expected Result:** The function should return an `Optional` object containing a `ChatMessage` with corresponding roles and types.

6. **Scenario:** Verify the function behavior when given a `ChatFunctionCall` object with different content.
   - **Test:** Pass a `ChatFunctionCall` object with different content to the `executeAndConvertToMessageSafely` function.
   - **Expected Result:** The function should return an `Optional` object containing a `ChatMessage` with corresponding content.
*/

// ********RoostGPT********
import com.theokanning.openai.completion.chat.ChatFunction;
import com.theokanning.openai.completion.chat.ChatFunctionCall;
import com.theokanning.openai.completion.chat.ChatMessage;
import com.theokanning.openai.completion.chat.ChatMessageRole;
import org.junit.Before;
import org.junit.Test;
import org.mockito.Mockito;

import java.util.Optional;

import static org.junit.Assert.assertEquals;
import static org.junit.Assert.assertFalse;
import static org.mockito.Mockito.when;

public class FunctionExecutor_executeAndConvertToMessageSafely_5a1d51ef82_Test {

    private FunctionExecutor functionExecutor;
    private ChatFunctionCall chatFunctionCall;
    private ChatFunction chatFunction;

    @Before
    public void setUp() {
        functionExecutor = new FunctionExecutor();
        chatFunctionCall = Mockito.mock(ChatFunctionCall.class);
        chatFunction = Mockito.mock(ChatFunction.class);
    }

    @Test
    public void testExecuteAndConvertToMessageSafely_validCall() {
        when(chatFunctionCall.getName()).thenReturn("validFunction");
        when(chatFunction.getExecutor().apply(Mockito.any())).thenReturn(new ChatMessage(ChatMessageRole.SYSTEM.value(), "test message", "validFunction"));

        functionExecutor.setFunctions(Collections.singletonList(chatFunction));
        Optional<ChatMessage> result = functionExecutor.executeAndConvertToMessageSafely(chatFunctionCall);

        assertTrue(result.isPresent());
        assertEquals("validFunction", result.get().getName());
        assertEquals(ChatMessageRole.SYSTEM.value(), result.get().getRole());
        assertEquals("test message", result.get().getContent());
    }

    @Test
    public void testExecuteAndConvertToMessageSafely_invalidCall() {
        when(chatFunctionCall.getName()).thenReturn("invalidFunction");

        functionExecutor.setFunctions(Collections.singletonList(chatFunction));
        Optional<ChatMessage> result = functionExecutor.executeAndConvertToMessageSafely(chatFunctionCall);

        assertFalse(result.isPresent());
    }

    @Test
    public void testExecuteAndConvertToMessageSafely_exceptionInExecution() {
        when(chatFunctionCall.getName()).thenReturn("exceptionFunction");
        when(chatFunction.getExecutor().apply(Mockito.any())).thenThrow(new RuntimeException());

        functionExecutor.setFunctions(Collections.singletonList(chatFunction));
        Optional<ChatMessage> result = functionExecutor.executeAndConvertToMessageSafely(chatFunctionCall);

        assertFalse(result.isPresent());
    }

    @Test
    public void testExecuteAndConvertToMessageSafely_nullCall() {
        Optional<ChatMessage> result = functionExecutor.executeAndConvertToMessageSafely(null);

        assertFalse(result.isPresent());
    }
}
