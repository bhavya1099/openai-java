// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

Test Scenario 1: Successful FineTuningJob creation
- Given a valid FineTuningJobRequest
- When the createFineTuningJob method is called
- Then it should return a FineTuningJob object

Test Scenario 2: Invalid FineTuningJobRequest
- Given an invalid FineTuningJobRequest (missing required fields or invalid values)
- When the createFineTuningJob method is called
- Then it should throw an appropriate exception

Test Scenario 3: API call failure
- Given a valid FineTuningJobRequest
- When the createFineTuningJob method is called and the API call fails (due to network issues, API unavailability, etc.)
- Then it should throw an appropriate exception

Test Scenario 4: Null FineTuningJobRequest
- Given a null FineTuningJobRequest
- When the createFineTuningJob method is called
- Then it should throw a NullPointerException

Test Scenario 5: API response mismatch
- Given a valid FineTuningJobRequest
- When the createFineTuningJob method is called and the API response does not match the expected FineTuningJob structure
- Then it should throw an appropriate exception

Test Scenario 6: API response delay
- Given a valid FineTuningJobRequest
- When the createFineTuningJob method is called and the API response is delayed beyond a reasonable limit
- Then the method should timeout and throw an exception

Test Scenario 7: Concurrent FineTuningJob creation
- Given several valid FineTuningJobRequests
- When the createFineTuningJob method is called concurrently for these requests
- Then it should handle the concurrency and return the corresponding FineTuningJob objects

Test Scenario 8: API response with error status
- Given a valid FineTuningJobRequest
- When the createFineTuningJob method is called and the API response is an error status
- Then it should handle the error status and throw an appropriate exception
*/

// ********RoostGPT********
import org.junit.Before;
import org.junit.Test;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.MockitoAnnotations;

import static org.junit.Assert.*;
import static org.mockito.Mockito.*;

public class OpenAiService_createFineTuningJob_e5a3db4450_Test {

    @InjectMocks
    OpenAiService openAiService;

    @Mock
    OpenAiApi openAiApi;

    @Before
    public void setUp() throws Exception {
        MockitoAnnotations.initMocks(this);
    }

    @Test
    public void testCreateFineTuningJob_success() {
        FineTuningJobRequest request = new FineTuningJobRequest();
        FineTuningJob expectedJob = new FineTuningJob();
        when(openAiApi.createFineTuningJob(request)).thenReturn(Single.just(expectedJob));

        FineTuningJob result = openAiService.createFineTuningJob(request);

        assertEquals(expectedJob, result);
        verify(openAiApi, times(1)).createFineTuningJob(request);
    }

    @Test(expected = NullPointerException.class)
    public void testCreateFineTuningJob_nullRequest() {
        openAiService.createFineTuningJob(null);
    }

    @Test(expected = OpenAiHttpException.class)
    public void testCreateFineTuningJob_apiError() {
        FineTuningJobRequest request = new FineTuningJobRequest();
        when(openAiApi.createFineTuningJob(request)).thenThrow(new HttpException(Response.error(400, ResponseBody.create(null, ""))));

        openAiService.createFineTuningJob(request);
    }
}
