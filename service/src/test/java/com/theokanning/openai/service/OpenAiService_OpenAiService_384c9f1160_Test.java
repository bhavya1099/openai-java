// ********RoostGPT********
/*
Test generated by RoostGPT for test java-junit4-test using AI Type Open AI and AI Model gpt-4

1. Scenario: Test if the OpenAiApi object is correctly initialized in the OpenAiService constructor.
   - Given an initialized OpenAiApi object,
   - When it is passed to the OpenAiService constructor,
   - Then the OpenAiService object should have the given OpenAiApi object as its api attribute.

2. Scenario: Test if the ExecutorService object is correctly initialized in the OpenAiService constructor.
   - Given an initialized ExecutorService object,
   - When it is passed to the OpenAiService constructor,
   - Then the OpenAiService object should have the given ExecutorService object as its executorService attribute.

3. Scenario: Test if the OpenAiService constructor throws an exception when a null OpenAiApi object is passed.
   - Given a null OpenAiApi object,
   - When it is passed to the OpenAiService constructor,
   - Then the constructor should throw an IllegalArgumentException.

4. Scenario: Test if the OpenAiService constructor throws an exception when a null ExecutorService object is passed.
   - Given a null ExecutorService object,
   - When it is passed to the OpenAiService constructor,
   - Then the constructor should throw an IllegalArgumentException.

5. Scenario: Test if the OpenAiService object is created when valid OpenAiApi and ExecutorService objects are passed.
   - Given valid OpenAiApi and ExecutorService objects,
   - When they are passed to the OpenAiService constructor,
   - Then a valid OpenAiService object should be created.

6. Scenario: Test if the OpenAiService object is correctly initialized when an empty ExecutorService is passed.
   - Given an empty ExecutorService object,
   - When it is passed to the OpenAiService constructor along with a valid OpenAiApi object,
   - Then the OpenAiService object should be initialized correctly with the empty ExecutorService.

7. Scenario: Test if the OpenAiService constructor throws an exception when invalid OpenAiApi and ExecutorService objects are passed.
   - Given invalid OpenAiApi and ExecutorService objects,
   - When they are passed to the OpenAiService constructor,
   - Then the constructor should throw an exception.
*/

// ********RoostGPT********
import com.theokanning.openai.service.OpenAiService;
import com.theokanning.openai.client.OpenAiApi;
import org.junit.Test;
import org.junit.runner.RunWith;
import org.junit.runners.JUnit4;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import static org.junit.Assert.*;

@RunWith(JUnit4.class)
public class OpenAiService_OpenAiService_384c9f1160_Test {

    @Test
    public void testOpenAiServiceConstructorWithValidInputs() {
        OpenAiApi api = new OpenAiApi();
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        OpenAiService service = new OpenAiService(api, executorService);
        assertNotNull(service);
        assertEquals(api, service.getApi());
        assertEquals(executorService, service.getExecutorService());
    }

    @Test(expected = IllegalArgumentException.class)
    public void testOpenAiServiceConstructorWithNullApi() {
        ExecutorService executorService = Executors.newSingleThreadExecutor();
        OpenAiService service = new OpenAiService(null, executorService);
    }

    @Test(expected = IllegalArgumentException.class)
    public void testOpenAiServiceConstructorWithNullExecutorService() {
        OpenAiApi api = new OpenAiApi();
        OpenAiService service = new OpenAiService(api, null);
    }

    @Test
    public void testOpenAiServiceConstructorWithEmptyExecutorService() {
        OpenAiApi api = new OpenAiApi();
        ExecutorService executorService = Executors.newFixedThreadPool(0);
        OpenAiService service = new OpenAiService(api, executorService);
        assertNotNull(service);
        assertEquals(api, service.getApi());
        assertEquals(executorService, service.getExecutorService());
    }
}
